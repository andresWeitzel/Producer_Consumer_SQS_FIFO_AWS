service: test-serverless-sqs

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  stage: dev
  region: us-east-1
  memorySize: 512
  timeout: 10
  environment: ${file(serverless.ssm.yml)}
  apiGateway:
    apiKeys:
      - name : xApiKey
        value : ${file(./serverless.ssm.yml):X_API_KEY}

plugins:
  - serverless-offline-sqs
  - serverless-offline-ssm
  - serverless-offline


functions:
  senderSQS:
    handler: src/lambdas/senderSQS.handler
    name : Queue-SendMessage-Lambda
    description: to send sqs message
    events:
      - http:
          method: POST
          path: sender-queue
          private: true

  ReceiverSQS:
    handler: src/lambdas/receiverSQS.handler
    name: Queue-ReceiveMessage-Lambda
    description: to receive sqs message
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - fifoQueueOne
              - Arn
          batchSize: 10 
resources:
  - ${file(src/resources/api-gateway.yml)}
  - ${file(src/resources/sqs-config.yml)}

custom:
  serverless-offline:
    httpPort: ${file(./serverless.ssm.yml):SERVERLESS_HTTP_PORT}
    lambdaPort: ${file(./serverless.ssm.yml):SERVERLESS_LAMBDA_PORT}
  serverless-offline-sqs:  
    sqsHost: ${file(./serverless.ssm.yml):SQS_HOST}
    sqsPort: ${file(./serverless.ssm.yml):SQS_PORT}
    autoCreate: true
    apiVersion: ${file(./serverless.ssm.yml):SQS_API_VERSION}
    endpoint: ${file(./serverless.ssm.yml):SQS_URL}
    region: ${file(./serverless.ssm.yml):AWS_REGION}
    accessKeyId: ${file(./serverless.ssm.yml):AWS_ACCESS_KEY_RANDOM_VALUE}
    secretAccessKey: ${file(./serverless.ssm.yml):AWS_SECRET_KEY_RANDOM_VALUE}
    skipCacheInvalidation: false
  serverless-offline-ssm:
    stages:
      - dev
    ssm: 
      ${file(./serverless.ssm.yml)}

    
